#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# dci-rhel-agent-ctl controls dci-rhel-agent (start, stop and kill).

import argparse
import subprocess
import signal
import sys
import yaml
import os

# dci-rhel-agent-ctl default values
default_value =	{
  "local_repo": "/var/www/html",
  "settings_path": "/etc/dci-rhel-agent/settings.yml",
  "hooks_path": "/etc/dci-rhel-agent/hooks",
  "dci_rhel_agent_url":"quay.io/distributedci/dci-rhel-agent:latest-8"
}

proc = None

def sigterm_handler(signal, frame):
  print('Exiting...')
  proc.terminate()
  sys.exit(0)

signal.signal(signal.SIGTERM, sigterm_handler)
signal.signal(signal.SIGINT, sigterm_handler)

def load_settings(settings_path):
  with open(settings_path, 'r') as settings:
    try:
      return yaml.safe_load(settings)
    except yaml.YAMLError as exc:
      print(exc)
      sys.exit(1)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-s', '--start', action='store_true', help="Start dci-rhel-agent")
    parser.add_argument('-c', '--config', action='store', help="Path to config file. Default is `%s`." % default_value['settings_path'], default=default_value['settings_path'])
    parser.add_argument('-u', '--url', action='store', help="Url for dci-rhel-agent. Default is `%s`." % default_value['dci_rhel_agent_url'], default=default_value['dci_rhel_agent_url'])
    parser.add_argument('-d', '--debug', action='store_true', help="Start a shell in dci-rhel-agent container")
    parser.add_argument('-l', '--local', action='store_true', help="[dev] Mount local directory `./dci-rhel-agent` in the container. This path can be overridden with env var `LOCAL_SOURCE_PATH`.")
    parser.add_argument('--build', action='store_true', help="[dev] Build the dci-rhel-agent container.")
    parser.add_argument('--skip-download', action='store_true', help="Skip the download of RHEL topics.")
    parser.add_argument('--hooks', action='store', help="Path to hooks folder. Default is `%s`." % default_value['hooks_path'], default=default_value['hooks_path'])
    parser.add_argument('-v', '--verbosity', action='store', help="Verbosity level for Ansible log (0-4).  Default is 1", type=int, choices=range(5), default=1)
    parser.add_argument('--tests-only', action='store_true', help="Skip provisioning and only run enabled RH tests and user tests.")
    parser.add_argument('--ext-bkr', action='store_true', help="Use an external beaker")
    parser.add_argument('-e', '--environment', action='append', help="Set custom environment variables from the command line, usage: -e var_name=value", nargs='+')

    args = parser.parse_args()

    global proc

    if args.build:
        myCmd = '/usr/bin/podman build -f Dockerfile -t dci-rhel-agent --no-cache'
        proc = subprocess.Popen(myCmd, shell=True)
        exit (proc.wait())

    settings_path = args.config
    dci_rhel_agent_url = args.url
    hooks_path = args.hooks

    entrypoint = ""
    if args.debug:
        entrypoint = "/bin/bash"

    if args.start:
        settings = load_settings(settings_path)
        if 'local_repo' in settings.keys():
            local_repo = settings['local_repo']
        else:
            print ("INFO: local_repo is NOT set in %s. Using default value." % default_value['local_repo'])
            local_repo = default_value['local_repo']
        if 'beaker_lab' not in settings.keys():
            print ("INFO: beaker_lab was not found in settings.yml.  Beaker server updates and SUT management will NOT be performed.")

        # If agent is NOT in dev/debug mode, update DCI packages automatically.
        if args.debug is False and args.local is False:
          # Start dci package update
          myCmd = 'yum upgrade -y \*dci\*'
          proc = subprocess.Popen(myCmd, shell=True)
          proc.wait()
          myCmd = 'podman pull %s' % (dci_rhel_agent_url)
          proc = subprocess.Popen(myCmd, shell=True)
          proc.wait()

        # Start dci-rhel-agent
        volumes = {
          hooks_path:'/etc/dci-rhel-agent/hooks',
          '/etc/dci-rhel-agent/secrets':'/etc/dci-rhel-agent/secrets:z',
          '/etc/dci-rhel-agent/inventory':'/etc/dci-rhel-agent/inventory',
          settings_path:'/etc/dci-rhel-agent/settings.yml',
          local_repo:'/data',
        }
        # if "-l" is used, we want to override container code with local code (dev mode)
        if args.local:
          local_source_path = os.environ.get('LOCAL_SOURCE_PATH', './dci-rhel-agent')
          volumes[local_source_path] = '/usr/share/dci-rhel-agent'

        myCmd = 'source /etc/dci-rhel-agent/dcirc.sh && '
        myCmd = myCmd + 'podman run --rm -ti --network host -e DCI_CLIENT_ID -e DCI_API_SECRET -e DCI_CS_URL -e SKIP_DOWNLOAD=%s -e VERBOSITY=%s -e TESTS_ONLY=%s -e EXT_BKR=%s' % (args.skip_download, args.verbosity, args.tests_only, args.ext_bkr)

        if args.environment:
          var_list = [item for sublist in args.environment for item in sublist]
          for var in var_list:
            myCmd = myCmd + ' -e ' + var

        for key, value in volumes.items():
          myCmd = myCmd + ' -v ' + key + ':' + value

        myCmd = myCmd + ' %s %s' % (dci_rhel_agent_url, entrypoint)
        proc = subprocess.Popen(myCmd, shell=True)
        proc.wait()
        sys.exit(proc.returncode)
    else:
      parser.print_help(sys.stderr)

if __name__ == "__main__":
    main()
