---
- name: stat the kvm guest image source exists
  stat:
    path: "{{ kvm_guest_image_source_path }}"
  register: stat_kvm_image_file

- name: Check if the jumpbox already exist
  ignore_errors: yes
  virt:
    name: "jumpbox"
    command: status
  register: jumpbox_exist

- name: Copy the kvm guest image source to match node name
  copy:
    src: "{{ kvm_guest_image_source_path }}"
    dest: "{{ libvirt_image_path }}/jumpbox.qcow2"
    remote_src: false
  become: true
  when: jumpbox_exist['failed']

- name: Add additional storage
  command: "qemu-img resize {{ libvirt_image_path }}/jumpbox.qcow2 +20G"
  become: true
  when: jumpbox_exist['failed']

- name: Create directories for cloud-config metadata
  file:
    path: /tmp/vm-jumpbox
    state: directory
  when: jumpbox_exist['failed']

- name: Prepare cloud-config/user-data file
  template:
    src: templates/cloud-config/user-data.j2
    dest: /tmp/vm-jumpbox/user-data
  when: jumpbox_exist['failed']
  
- name: Prepare cloud-config/meta-data
  template:
    src: templates/cloud-config/meta-data.j2
    dest: /tmp/vm-jumpbox/meta-data
  when: jumpbox_exist['failed']

- name: Remove /tmp/vm-jumpbox.iso
  command: |
    rm -rf /tmp/vm-jumpbox.iso || true
  become: true
  ignore_errors: yes

- name: Generate ci data cd image for cloud-init when cloud config is defined
  command: |
    mkisofs -o /tmp/vm-jumpbox.iso -V cidata -r -J
            --quiet /tmp/vm-jumpbox/user-data 
            /tmp/vm-jumpbox/meta-data
  become: true
  when: jumpbox_exist['failed']

- name: "set qemu_path"
  set_fact:
    qemu_path: "{{  (ansible_distribution in ['CentOS','RedHat']) | ternary('/usr/libexec/', '/usr/bin/') }}"

- name: Define jumpbox node
  become: true
  virt:
    command: define
    xml: "{{ lookup('template', 'libvirt_jumpbox.xml.j2') }}"
  when: jumpbox_exist['failed']

- name: sync memory data to disk
  command: sync

- name: "Start VM"
  become: true
  virt:
    name: jumpbox
    state: "running"
  when: jumpbox_exist['failed']

- name: Wait for the jumpbox to stop
  become: true
  virt:
    name: jumpbox
    command: status
  register: vmstatus
  until: vmstatus.status == 'shutdown'
  retries: 1500
  delay: 10
  when: jumpbox_exist['failed']

- name: Remove cloud-init cdrom
  command: virsh change-media jumpbox hda --eject --config
  become: true
  when: jumpbox_exist['failed']

- name: sync memory data to disk
  command: sync

- name: Start the jumpbox
  become: true
  virt:
    name: jumpbox
    state: running
  when: jumpbox_exist['failed']
