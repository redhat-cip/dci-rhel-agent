---
#
# Tasks are included to run on beaker_server host,
# Delegate_to: localhost when needed.
#
- name: Set topic_name variable
  set_fact:
    topic_name: "{{ hostvars.localhost.topic_name }}"

- name: Copy RHEL8 or RHEL9 ppc64le boot files to tftproot when provisioning a ppc64le machine
  copy:
    src: "{{ local_repo }}/{{ topic_name }}/compose/BaseOS/ppc64le/os/boot/grub/powerpc-ieee1275"
    dest: "{{ item }}"
    remote_src: yes
  with_items:
    - "/var/lib/tftpboot/boot/grub2/{{ fqdn }}"
    - /var/lib/tftpboot/boot/grub
  when: hostvars.localhost.system_arch == "ppc64le" and (topic_name.startswith("RHEL-8") or topic_name.startswith("RHEL-9"))

- name: Copy RHEL7 ppc64le boot files to tftproot when provisioning a ppc64le machine
  copy:
    src: "{{ local_repo }}/{{ topic_name }}/compose/Server/ppc64le/os/boot/grub/powerpc-ieee1275"
    dest: "{{ item }}"
    remote_src: yes
  with_items:
    - "/var/lib/tftpboot/boot/grub2/{{ fqdn }}"
    - /var/lib/tftpboot/boot/grub
  when: hostvars.localhost.system_arch == "ppc64le" and topic_name.startswith("RHEL-7")

- name: Download .composeinfo
  fetch:
    src: "{{ hostvars.beaker_server.local_repo }}/{{ topic_name }}/compose/.composeinfo"
    dest: /var/tmp/
    flat: yes

- name: Populate the Beaker XML job from template
  vars:
      distro_name: "{{ lookup('ini', 'name section=product file=/var/tmp/.composeinfo') }}"
  block:
    - name: Create a temporary file
      tempfile:
        state: file
        suffix: xml
      register: job_xml
    - name: Create Beaker job.xml from template
      template:
        src: /usr/share/dci-rhel-agent/templates/job.xml.j2
        dest: "{{ job_xml.path }}"
  when: beaker_xml is not defined

- name: Upload .composeinfo to DCI Control Server
  delegate_to: localhost
  dci_file:
    path: /var/tmp/.composeinfo
    name: 'composeinfo.txt'
    mime: 'text/plain'
    job_id: '{{ hostvars.localhost.job_id }}'

- name: Configure fact to use XML from template
  set_fact:
    beaker_xml: "{{ job_xml.path }}"
  when: beaker_xml is not defined

- name: Upload job.xml to DCI Control Server
  environment:
    - DCI_CLIENT_ID: "{{ hostvars.localhost.dci_client_id }}"
    - DCI_API_SECRET: "{{ hostvars.localhost.dci_api_secret }}"
    - DCI_CS_URL: "{{ hostvars.localhost.dci_cs_url }}"
  dci_file:
    path: "{{ beaker_xml }}"
    name: 'job.xml'
    mime: 'text/xml'
    job_id: '{{ hostvars.localhost.job_id }}'

- name: Launch Beaker install
  shell: "bkr job-submit {{ beaker_xml }}"
  register: bkr_jobid
  become: true

- name: Register Beaker Job ID
  set_fact:
    bkrjobid: "{{ bkr_jobid.stdout | regex_replace(\".*\\s\\[\\'(.*)\\'\\]\",'\\1') }}"

- name: 'debug bkr_job_id'
  debug:
    msg: bkr_job_id:"{{ bkrjobid }}"

# Beaker has an initial watchdog for reboot and installation start. The watchdog
# is then updated for the installation time.  First check for the presence of an
# installation log (anaconda.log) associated with the job before attempting to
# update the installation watchdog.

- name: Wait for reboot watchdog to be available for update
  shell: "bkr watchdog-show {{ bkrjobid | regex_replace('J:') }}"
  register: reboot_watchdog_availability
  retries: 25
  until: "'N/A' not in reboot_watchdog_availability.stdout"
  when: reboot_watchdog_timeout is defined

- name: Update Beaker reboot watchdog time if specified
  shell: "bkr watchdog-extend --by {{ reboot_watchdog_timeout }} {{ bkrjobid | regex_replace('J:','R:') }}"
  when: reboot_watchdog_timeout is defined

- name: Wait for installation watchdog to be available for update
  shell: "bkr job-logs {{ bkrjobid }}"
  register: log_list
  retries: 25
  delay: 30
  until: "'anaconda.log' in log_list.stdout"
  when: install_watchdog_timeout is defined

- name: Update Beaker install watchdog time if specified
  shell: "bkr watchdog-extend --by {{ install_watchdog_timeout }} {{ bkrjobid | regex_replace('J:','R:') }}"
  when: install_watchdog_timeout is defined

- name: Wait system to be installed
  bkr_info:
    job_id: "{{ bkrjobid }}"
    task: "/distribution/check-install"
  become: true
  register: job_install
  failed_when: job_install['status'] in ['Cancelled','Aborted']
