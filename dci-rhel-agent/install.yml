---
- name: Copy RHEL8 ppc64le boot files to tftproot when provisioning a ppc64le machine
  copy:
    src: "{{ local_repo }}/{{ topic }}/compose/BaseOS/ppc64le/os/boot/grub/powerpc-ieee1275"
    dest: "/var/lib/tftpboot/boot/grub2/{{ fqdn }}"
  when: system_arch == "ppc64le" and topic.startswith("RHEL-8")

- name: Copy RHEL7 ppc64le boot files to tftproot when provisioning a ppc64le machine
  copy:
    src: "{{ local_repo }}/{{ topic }}/compose/Server/ppc64le/os/boot/grub/powerpc-ieee1275"
    dest: "/var/lib/tftpboot/boot/grub2/{{ fqdn }}"
  when: system_arch == "ppc64le" and topic.startswith("RHEL-7")

- name: Populate the Beaker XML job from template
  vars:
      #distro_name: "{{ lookup('ini', 'name section=product file={{ hostvars.beaker_server.local_repo }}/{{ hostvars.localhost.topic }}/compose/.composeinfo') }}"

      # fatal: [beaker_server]: FAILED! => {"changed": false, "msg": "AnsibleError: An unhandled exception occurred while templating
      # '{{ lookup('ini', 'name section=product file={{ hostvars.beaker_server.local_repo }}/{{ hostvars.localhost.topic }}/compose/.composeinfo') }}'.
      #Error was a <class 'ansible.errors.AnsibleError'>, original message: An unhandled exception occurred while running the lookup plugin 'ini'. Error was a <class 'ansible.errors.AnsibleParserError'>, original message: Invalid filename: 'None'"}
      distro_name: "RHEL-8.2.0-20191114.n.0"
  block:
    - name: Create a temporary file
      tempfile:
        state: file
        suffix: xml
      register: job_xml
    - name: Create Beaker job.xml from template
      template:
        src: /usr/share/dci-rhel-agent/templates/job.xml.j2
        dest: "{{ job_xml.path }}"
  when: beaker_xml is not defined

- name: Configure fact to use XML from template
  set_fact:
    beaker_xml: "{{ job_xml.path }}"
  when: beaker_xml is not defined

- name: Upload job.xml to DCI Control Server
  environment:
    - DCI_CLIENT_ID: "{{ hostvars.localhost.dci_client_id }}"
    - DCI_API_SECRET: "{{ hostvars.localhost.dci_api_secret }}"
    - DCI_CS_URL: "{{ hostvars.localhost.dci_cs_url }}"
  dci_file:
    path: "{{ beaker_xml }}"
    name: 'job.xml'
    mime: 'text/xml'
    job_id: '{{ hostvars.localhost.job_id }}'

- name: Upload wait.py to Beaker server
  copy:
    src: "{{ playbook_dir }}/wait.py"
    dest: /tmp/wait.py
    mode: '0755'

- name: Launch Beaker install
  shell: "bkr job-submit {{ beaker_xml }}"
  register: bkr_jobid
  become: true

- name: Register Beaker Job ID
  set_fact:
    bkrjobid: "{{ bkr_jobid.stdout | regex_replace(\".*\\s\\[\\'(.*)\\'\\]\",'\\1') }}"

- name: Wait system to be installed
  shell: "/tmp/wait.py {{ bkrjobid }}"
  become: true