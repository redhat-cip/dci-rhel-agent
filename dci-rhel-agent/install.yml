---
#
# Tasks are included to run on beaker_server host,
# Delegate_to: localhost when needed.
#
- name: Copy RHEL8 ppc64le boot files to tftproot when provisioning a ppc64le machine
  copy:
    src: "{{ local_repo }}/{{ topic }}/compose/BaseOS/ppc64le/os/boot/grub/powerpc-ieee1275"
    dest: "{{ item }}"
  with_items:
    - "/var/lib/tftpboot/boot/grub2/{{ fqdn }}"
    - /var/lib/tftpboot/boot/grub
  when: hostvars.localhost.system_arch == "ppc64le" and topic.startswith("RHEL-8")

- name: Copy RHEL7 ppc64le boot files to tftproot when provisioning a ppc64le machine
  copy:
    src: "{{ local_repo }}/{{ topic }}/compose/Server/ppc64le/os/boot/grub/powerpc-ieee1275"
    dest: "{{ item }}"
  with_items:
    - "/var/lib/tftpboot/boot/grub2/{{ fqdn }}"
    - /var/lib/tftpboot/boot/grub
  when: hostvars.localhost.system_arch == "ppc64le" and topic.startswith("RHEL-7")

- name: Copy RHEL7 boot files to tftproot for UEFI BIOS SUTs
  block:
    - name: Copy grubx64.efi
      copy:
        src: "{{ local_repo }}/{{ topic }}/compose/Server/x86_64/os/EFI/BOOT/grubx64.efi"
        dest: /var/lib/tftpboot/grubx64.efi
        owner: root
        group: root
        mode: 0755
  when: hostvars.localhost.system_arch == "x86_64" and topic.startswith("RHEL-7") and hostvars.localhost.beaker_lab.system_inventory[fqdn].efi == true

- name: Copy RHEL8 boot files to tftproot for UEFI BIOS SUTs
  block:
    - name: Copy grubx64.efi
      copy:
        src: "{{ local_repo }}/{{ topic }}/compose/BaseOS/x86_64/os/EFI/BOOT/grubx64.efi"
        dest: /var/lib/tftpboot/grubx64.efi
        owner: root
        group: root
        mode: 0755
  when: hostvars.localhost.system_arch == "x86_64" and topic.startswith("RHEL-8") and hostvars.localhost.beaker_lab.system_inventory[fqdn].efi == true

- name: Copy RHEL8 aarch64 boot files to tftproot when provisioning an aarch64 SUT
  block:
    - name: Copy grubaa64.efi
      copy:
        src: "{{ local_repo }}/{{ topic }}/compose/BaseOS/aarch64/os/EFI/BOOT/grubaa64.efi"
        dest: /var/lib/tftpboot/grubaa64.efi
  when: hostvars.localhost.system_arch == "aarch64" and topic.startswith("RHEL-8")

- name: Download .composeinfo
  fetch:
    src: "{{ hostvars.beaker_server.local_repo }}/{{ hostvars.localhost.topic }}/compose/.composeinfo"
    dest: /var/tmp/
    flat: yes

- name: Populate the Beaker XML job from template
  vars:
      distro_name: "{{ lookup('ini', 'name section=product file=/var/tmp/.composeinfo') }}"
  block:
    - include_vars: /etc/dci-rhel-agent/settings.yml
    - name: Create a temporary file
      tempfile:
        state: file
        suffix: xml
      register: job_xml
    - name: Create Beaker job.xml from template
      template:
        src: /usr/share/dci-rhel-agent/templates/job.xml.j2
        dest: "{{ job_xml.path }}"
  when: beaker_xml is not defined

- name: Upload .composeinfo to DCI Control Server
  delegate_to: localhost
  dci_file:
    path: /var/tmp/.composeinfo
    name: 'composeinfo.txt'
    mime: 'text/plain'
    job_id: '{{ hostvars.localhost.job_id }}'

- name: Configure fact to use XML from template
  set_fact:
    beaker_xml: "{{ job_xml.path }}"
  when: beaker_xml is not defined

- name: Upload job.xml to DCI Control Server
  environment:
    - DCI_CLIENT_ID: "{{ hostvars.localhost.dci_client_id }}"
    - DCI_API_SECRET: "{{ hostvars.localhost.dci_api_secret }}"
    - DCI_CS_URL: "{{ hostvars.localhost.dci_cs_url }}"
  dci_file:
    path: "{{ beaker_xml }}"
    name: 'job.xml'
    mime: 'text/xml'
    job_id: '{{ hostvars.localhost.job_id }}'

- name: Launch Beaker install
  shell: "bkr job-submit {{ beaker_xml }}"
  register: bkr_jobid
  become: true

- name: Register Beaker Job ID
  set_fact:
    bkrjobid: "{{ bkr_jobid.stdout | regex_replace(\".*\\s\\[\\'(.*)\\'\\]\",'\\1') }}"

- name: 'debug bkr_job_id'
  debug:
    msg: bkr_job_id:"{{ bkrjobid }}"

- name: Get current job results containing kickstart URL
  shell: "bkr job-results {{ bkrjobid }}"
  register: bkrjobresults
  until: bkrjobresults.stdout.find("kickstart_url") != -1
  retries: 10
  delay: 5

- name: Parse kickstart URL from job result
  xml:
    xmlstring: "{{ bkrjobresults.stdout }}"
    xpath: /job/recipeSet/recipe
    content: attribute
  register: recipeinfo

- name: Register kickstart URL
  set_fact:
    ksurl: "{{ recipeinfo.matches[0].recipe.kickstart_url }}"

- name: Get IP of SUT from /etc/hosts
  shell: "grep -w {{ fqdn }} /etc/dci-rhel-agent/hosts.dci | awk '{ print $1 }'"
  register: ipgrep

- name: Populate unique grub cfg file for this SUT from template
  template:
    src: /usr/share/dci-rhel-agent/templates/grub.cfg.j2
    dest: "/var/lib/tftpboot/grub.cfg-{{ ipgrep.stdout | ip4_hex | upper }}"

- name: Wait system to be installed
  bkr_info:
    job_id: "{{ bkrjobid }}"
    task: "/distribution/check-install"
  become: true
