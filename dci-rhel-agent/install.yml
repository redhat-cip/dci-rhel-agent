---
#
# Tasks are included to run on jumpbox host,
# Delegate_to: localhost when needed.
#
- name: Populate the Beaker XML job from template
  environment:
    - DCI_CLIENT_ID: "{{ hostvars.localhost.dci_client_id }}"
    - DCI_API_SECRET: "{{ hostvars.localhost.dci_api_secret }}"
    - DCI_CS_URL: "{{ hostvars.localhost.dci_cs_url }}"
  vars:
      compose_info: "{{ hostvars.localhost.compose_info }}"
      topic_name: "{{ hostvars.localhost.topic_name }}"
      system_arch: "{{ hostvars.localhost.system_arch }}"
      components: "{{ hostvars.localhost.components }}"
      recipeSets: "{{ hostvars.localhost.recipeSets }}"
      arch_tags: "{{ hostvars.localhost.arch_tags }}"
  block:
    - name: Verify correct component is downloaded
      assert:
        that:
          - compose_info.compose_id == item.display_name
      when: item.type == 'compose'
      loop: "{{ components }}"

    - name: 'Tag job with SUT arch'
      delegate_to: localhost
      dci_job:
        id: "{{ hostvars.localhost.job_id }}"
        tags: '{{ arch_tags | unique }}'

    - name: Populate the Beaker XML job from template
      block:
        - name: Create a temporary file
          tempfile:
            state: file
            suffix: xml
          register: job_xml

        - name: Create Beaker job.xml from template
          template:
            src: job.xml.j2
            dest: "{{ job_xml.path }}"

        - name: Configure fact to use XML from template
          set_fact:
            beaker_xml: "{{ job_xml.path }}"
      when: beaker_xml is not defined

    - name: Fetch beaker_xml local
      fetch:
        src: "{{ beaker_xml }}"
        dest: "/tmp/{{ hostvars.localhost.job_id }}_beaker_xml"
        mode: 0755
        flat: true

    - name: Upload job.xml to DCI Control Server
      delegate_to: localhost
      dci_file:
        path: "/tmp/{{ hostvars.localhost.job_id }}_beaker_xml"
        name: 'job.xml'
        mime: 'text/xml'
        job_id: '{{ hostvars.localhost.job_id }}'

    - name: Launch Beaker install
      shell: "bkr job-submit {{ beaker_xml }}"
      register: bkr_jobid
      become: true

    - name: Register Beaker Job ID
      set_fact:
        bkrjobid: "{{ bkr_jobid.stdout | regex_replace(\".*\\s\\[\\'(.*)\\'\\]\",'\\1') }}"

    - name: 'debug bkr_job_id'
      debug:
        msg: bkr_job_id:"{{ bkrjobid }}"
...
