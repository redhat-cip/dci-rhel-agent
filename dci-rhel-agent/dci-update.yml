---
- name: Update dci-rhel-agent
  hosts: beaker_server
  gather_facts: false
  tasks:
    - name: Ensure an ssh key exists
      stat:
        path: '/etc/dci-rhel-agent/secrets/id_rsa'
      register: check_id_rsa

    - name: Create an ssh keypair if one does not exist
      openssh_keypair:
        path: '/etc/dci-rhel-agent/secrets/id_rsa'
        comment: 'self-generated@dci-rhel-agent'
      when: check_id_rsa.stat.exists == False

    - name: Ensure dnsmasq, tftp, xinetd installed
      package:
        name: "{{ item }}"
      with_items:
        - dnsmasq
        - tftp
        - tftp-server
        - xinetd

    - name: Verify xinetd tftp config file exists
      stat:
        path: /etc/xinetd.d/tftp
      register: tftp_cfg

    - name: Update xinetd tftp config to enable tftp
      lineinfile:
        path: /etc/xinetd.d/tftp
        regexp: 'disable\s*= yes'
        line: '        disable                 = no'
      when: tftp_cfg.stat.exists
      register: tftp_cfg_updated

    - name: Restart and enable dnsmasq, tftp, and xinetd packages when cfg updated
      service:
        name: "{{ item }}"
        state: restarted
        enabled: yes
      with_items:
        - tftp
        - xinetd
        - dnsmasq
      when: tftp_cfg_updated.changed

    - name: Update beaker.conf file
      template:
        src: /usr/share/dci-rhel-agent/templates/beaker.conf.j2
        dest: /etc/dnsmasq.d/beaker.conf
      register: dns_conf_update
      when: hostvars.localhost.beaker_lab is defined

    - name: Update hosts file
      block:
        - name: Update hosts file with any new systems (no domain) if lab is using DCI DNS
          lineinfile:
            path: /etc/hosts
            line: "{{ hostvars.localhost.beaker_lab.system_inventory[item.key].ip_address }} {{ item.key }}"
          loop: "{{ q('dict', hostvars.localhost.beaker_lab['system_inventory'] | default({})) }}"
          register: etc_hosts_update1
          when: item.key.split(".")|length == 1

        - name: Update hosts file with any new systems with domain if lab is using DCI DNS
          lineinfile:
            path: /etc/hosts
            line: '{{ hostvars.localhost.beaker_lab.system_inventory[item.key].ip_address }} {{ item.key.split(".")[0] }} {{ item.key }}'
          loop: "{{ q('dict', hostvars.localhost.beaker_lab['system_inventory'] | default({})) }}"
          register: etc_hosts_update2
          when: item.key.split(".")|length > 1

        - name: Update hosts file with jumpbox information (no domain) if lab is using DCI DNS
          lineinfile:
            path: /etc/hosts
            line: "{{ hostvars.localhost.local_repo_ip }} {{ hostvars.localhost.beaker_lab.jumpbox_fqdn }}"
          register: etc_hosts_update3
          when: (hostvars.localhost.beaker_lab.jumpbox_fqdn.split(".")|length == 1)

        - name: Update hosts file with jumpbox information (domain) if lab is using DCI DNS
          lineinfile:
            path: /etc/hosts
            line: '{{ hostvars.localhost.local_repo_ip }} {{ hostvars.localhost.beaker_lab.jumpbox_fqdn.split(".")[0] }} {{ hostvars.localhost.beaker_lab.jumpbox_fqdn }}'
          register: etc_hosts_update4
          when: (hostvars.localhost.beaker_lab.jumpbox_fqdn.split(".")|length > 1)
      when: (hostvars.localhost.beaker_lab is defined) and (hostvars.localhost.beaker_lab.external_dns == false)

    - name: Restart dnsmasq if any config files were changed
      service:
        name: dnsmasq
        state: restarted
      when: dns_conf_update.changed | default('false') | bool or etc_hosts_update1.changed | default ('false') | bool or etc_hosts_update2.changed | default ('false') | bool or etc_hosts_update3.changed | default ('false') | bool or etc_hosts_update4.changed | default ('false') | bool

    - name: Query systems list
      command: bkr system-list
      register: bkr_systems
      changed_when: false
      become: true
      failed_when: false

    - debug:
        msg: "Current Beaker Systems: {{ bkr_systems.stdout_lines }}"

    - name: Update power settings for each existing test system
      command: >
        bkr system-modify
        --power-type={{ hostvars.localhost.beaker_lab.system_inventory[item.key].power_type }}
        --power-address={{ hostvars.localhost.beaker_lab.system_inventory[item.key].power_address }}
        --power-user={{ hostvars.localhost.beaker_lab.system_inventory[item.key].power_user }}
        --power-password={{ hostvars.localhost.beaker_lab.system_inventory[item.key].power_password }}
        --power-id={{ hostvars.localhost.beaker_lab.system_inventory[item.key].power_id }}
        {{ item.key }}
      become: true
      loop: "{{ q('dict', hostvars.localhost.beaker_lab.system_inventory | default({})) }}"

    - name: Create any systems in Beaker which were not already present
      command: >
        bkr system-create
        --lab-controller={{ hostvars.localhost.beaker_lab.labcontroller_fqdn | default(hostvars.localhost.beaker_lab.jumpbox_fqdn) }}
        --arch={{ hostvars.localhost.beaker_lab.system_inventory[item.key].arch }}
        --power-type={{ hostvars.localhost.beaker_lab.system_inventory[item.key].power_type }}
        --power-address={{ hostvars.localhost.beaker_lab.system_inventory[item.key].power_address }}
        --power-user={{ hostvars.localhost.beaker_lab.system_inventory[item.key].power_user }}
        --power-password={{ hostvars.localhost.beaker_lab.system_inventory[item.key].power_password }}
        --power-id={{ hostvars.localhost.beaker_lab.system_inventory[item.key].power_id | default(item.key) }}
        --condition=Automated
        --release-action=LeaveOn
        {{ item.key }}
      when: (item.key not in bkr_systems.stdout_lines) and (hostvars.localhost.beaker_lab is defined)
      become: true
      loop: "{{ q('dict', hostvars.localhost.beaker_lab.system_inventory | default({})) }}"

    - name: Ensure latest dci-downloader is installed
      yum:
        name: dci-downloader
        state: latest
