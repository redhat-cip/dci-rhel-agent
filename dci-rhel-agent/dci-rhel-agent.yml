---
- name: 'Schedule a new job'
  hosts: localhost
  gather_facts: false
  tasks:
    - name: 'Read credentials from env vars'
      set_fact:
        dci_client_id="{{ lookup('env','DCI_CLIENT_ID') }}"
        dci_api_secret="{{ lookup('env','DCI_API_SECRET') }}"
        dci_cs_url="{{ lookup('env','DCI_CS_URL') }}"
      no_log: true

    - name: 'Schedule a new job in DCI Control Server'
      dci_job:
        components: '{{ dci_components }}'
        components_by_query: "{{ dci_components_by_query }}"
        topic: '{{ topic }}'
        comment: "{{ dci_comment | default('') }}"
        url: "{{ dci_url | default('') }}"
        name: "{{ dci_name | default('') }}"
        configuration: "{{ dci_configuration | default('') }}"
      register: job_info

    - name: 'Debug dci_job_id'
      debug:
        msg: dci_job_id:"{{ job_info['job']['id'] }}"

    - name: 'Set global variables'
      set_fact:
        job_id: "{{ job_info['job']['id'] }}"
        topic_id: "{{ job_info['job']['topic_id'] }}"
        topic_name: "{{ job_info['job']['topic']['name'] }}"
        remoteci_id: "{{ job_info['job']['remoteci_id'] }}"
        components: "{{ job_info['job']['components'] }}"
        product: "{{ job_info['job']['topic']['product_id'] }}"

    - name: 'Update job name with topic_name'
      dci_job:
        id: "{{ job_id }}"
        name: '{{ topic_name }}'

    - name: 'Set DCI tags for the current job'
      dci_job:
        id: "{{ job_id }}"
        tags: '{{ dci_tags }}'
      when: dci_tags | length > 0

    - name: 'Upload settings yml file'
      ignore_errors: yes
      dci_file:
        path: /etc/dci-rhel-agent/settings.yml
        name: settings.yml
        job_id: "{{ hostvars.localhost.job_id }}"

    - name: 'Upload hooks directory contents'
      dci_file:
        path: "{{ item }}"
        name: "{{ item | basename }}"
        job_id: "{{ hostvars.localhost.job_id }}"
      with_fileglob:
        - /etc/dci-rhel-agent/hooks/*

    - name: 'Check partner user-tests hook file is present'
      stat:
        path: '/etc/dci-rhel-agent/hooks/user-tests.yml'
      register: check_user_tests_hook_file

- import_playbook: beaker-lab.yml
  when:
    - beaker_lab is defined
    - beaker_lab | length > 0

- import_playbook: conserver.yml
  when:
    - beaker_lab is defined
    - beaker_lab | length > 0

- name: 'Prepare the jumpbox'
  hosts: localhost
  gather_facts: no
  tags:
    - pre-run
    - jumpbox
  tasks:
    - block:
        - name: 'Add job state pre-run'
          dci_job:
            id: "{{ job_id }}"
            status: "pre-run"

        - name: 'Create temp dir'
          include_tasks: create_temp_dir.yml

        - name: 'Check pre-run hook file is present'
          stat:
            path: '/etc/dci-rhel-agent/hooks/pre-run.yml'
          register: check_pre_run

        - name: 'Run the pre-run hook if present'
          include_tasks: '/etc/dci-rhel-agent/hooks/pre-run.yml'
          when: check_pre_run.stat.exists
      rescue:
        - name: Teardown error
          include_tasks: teardown_error.yml

- name: 'Prepare the Distro and Harness'
  hosts: localhost
  gather_facts: yes
  tags:
    - pre-run
    - beaker
  tasks:
    - block:
        - name: 'Download RHEL'
          include_tasks:
            file: download.yml
            apply:
              tags: download
          tags: always
        - name: 'Process Recipes'
          include_tasks: process_recipe.yml
          loop: "{{ systems | dict2items }}"
          loop_control:
            loop_var: system
        - name: 'Download harness'
          include_tasks: dci-harness.yml
      rescue:
        - name: Teardown error
          include_tasks: teardown_error.yml

- name: 'Launch install'
  hosts: beaker_server
  tags:
    - install
    - beaker
  tasks:
    - block:
        - name: 'Create temp dir'
          include_tasks: create_temp_dir.yml

        - name: 'Add job state running'
          delegate_to: localhost
          dci_job:
            id: "{{ hostvars.localhost.job_id }}"
            status: "running"

        - name: 'Install RHEL on SUT'
          include_tasks: install.yml
      rescue:
        - name: Teardown failure
          include_tasks: teardown_failure.yml

- name: 'Monitor SUTs Install'
  hosts: beaker_sut
  gather_facts: False
  strategy: free
  tags:
    - install
    - beaker
  tasks:
    - block:
        - name: 'Monitor SUT'
          include_tasks: monitor_suts.yml
      rescue:
        - name: Teardown failure
          include_tasks: teardown_failure.yml

- name: 'Launch tests on the jumpbox'
  hosts: localhost
  gather_facts: yes
  tags:
    - tests
    - jumpbox
  tasks:
    - block:
        - name: 'Check partner tests hook file is present'
          stat:
            path: '/etc/dci-rhel-agent/hooks/tests.yml'
          register: check_tests_hook_file

        - name: 'Launch partner tests if present'
          include_tasks: '/etc/dci-rhel-agent/hooks/tests.yml'
          when: check_tests_hook_file.stat.exists
      rescue:
        - name: Teardown failure
          include_tasks: teardown_failure.yml

- name: 'Launch tests on SUTs'
  hosts: beaker_sut
  gather_facts: no
  tags:
    - tests
    - beaker
    - sut
  tasks:
    - block:
        - name: 'Launch RHEL CKI Test'
          ignore_errors: yes
          import_role:
            name: dci-rhel-cki
          when:
            - dci_rhel_agent_cki|bool and (hostvars.localhost.topic_name.startswith("RHEL-7") or hostvars.localhost.topic_name.startswith("RHEL-8"))
          become: true

        - name: 'Launch RHEL HW Cert Tests'
          ignore_errors: yes
          import_role:
            name: dci-rhel-certification
          when:
            - dci_rhel_agent_cert|bool and (hostvars.localhost.topic_name.startswith("RHEL-7") or hostvars.localhost.topic_name.startswith("RHEL-8"))
          become: true

        - name: 'Launch partner tests if present'
          include_tasks: '/etc/dci-rhel-agent/hooks/user-tests.yml'
          when: hostvars.localhost['check_user_tests_hook_file'].stat.exists
      rescue:
        - name: Teardown failure
          include_tasks: teardown_failure.yml

- name: 'Grab logs and release SUTs'
  hosts: beaker_server
  gather_facts: no
  tags:
    - post-run
    - beaker
  tasks:
    - block:
        - name: 'Add job state post-run'
          delegate_to: localhost
          dci_job:
            id: "{{ hostvars.localhost.job_id }}"
            status: "post-run"

        - name: 'Upload Beaker logs to DCI Control server'
          include_tasks: logs.yml

      rescue:
        - name: Teardown failure
          include_tasks: teardown_failure.yml

- name: 'Success'
  hosts: localhost
  gather_facts: no
  tags:
    - success
    - jumpbox
  tasks:
    - name: 'Run the success'
      include_tasks: teardown_success.yml
