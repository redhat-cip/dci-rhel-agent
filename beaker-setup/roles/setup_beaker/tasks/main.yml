- name: Install Required Packages
  package:
    name:
      - podman
      - tftp-server
    state: present

- name: Firewall Enabled
  block:
    - name: Install firewalld Packages
      package:
        name:
          - firewalld
        state: present

    - name: Manage firewalld service
      systemd:
        name: firewalld
        state: "{{ firewall_enabled | ternary('started','stopped') }}"
        enabled: "{{ firewall_enabled }}"

    - name: Configure Firewall
      include_tasks: configure_firewall.yml
  when: firewall_enabled

- name: Create temp dir
  tempfile:
    state: directory
  register: config_file

- name: Create directory to hold files
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ file_owner }}"
    group: "{{ file_group }}"
    mode: 0777
    recurse: yes
  loop:
    - "{{ data_dir }}/mysql"
    - "{{ data_dir }}/beaker"
    - "{{ data_dir }}/config"

- name: Gather info about specific pods
  containers.podman.podman_pod_info:
    name: "{{ beaker_pod_name }}"
  register: bkr_pod_details

- name: Remove Beaker Pod
  containers.podman.podman_pod:
    name: "{{ beaker_pod_name }}"
    state: absent
  when: (bkr_pod_details.pods | length) > 0

- name: Process templates
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0644
    trim_blocks: true
    lstrip_blocks: true
  loop:
    - src: pod.yml.j2
      dest: "{{ config_file.path }}/pod.yml"
    - src: configmap.yml.j2
      dest: "{{ config_file.path }}/configmap.yml"

- name: Play kube file
  containers.podman.podman_play:
    kube_file: "{{ config_file.path }}/pod.yml"
    configmap: "{{ config_file.path }}/configmap.yml"
    recreate: true
    state: created

- name: Copy the systemd service file
  copy:
    content: |
      [Unit]
      Description=Podman beaker.service
      [Service]
      Restart=no
      ExecStart=/usr/bin/podman pod start {{ beaker_pod_name }}
      ExecStop=/usr/bin/podman pod stop -t 10 {{ beaker_pod_name }}
      KillMode=none
      Type=forking
      [Install]
      WantedBy=default.target
    dest: "/etc/systemd/system/beaker.service"
    mode: 0644

- name: Reload systemd service
  systemd:
    daemon_reexec: yes
    scope: system

- name: Enable beaker.service
  systemd:
    name: beaker
    enabled: yes
    scope: system

- name: Start beaker.service
  systemd:
    name: beaker
    state: started
    scope: system

- name: Wait for beaker
  uri:
    url: http://localhost/bkr
    method: GET
    status_code: 200
  retries: 18
  delay: 10
  register: result
  until: result.status == 200

- name: Generate beaker client config
  copy:
    content: |
      # Base URL of the Beaker server (without trailing slash!)
      HUB_URL = "http://localhost/bkr"

      # Hub authentication method
      AUTH_METHOD = "password"

      # Username and password
      USERNAME = "{{ beaker_admin_login }}"
      PASSWORD = "{{ beaker_admin_password }}"
    dest: /etc/beaker/client.conf
    mode: 0640

- name: Generate a token from beaker
  uri:
    url: http://localhost/bkr/login
    method: POST
    body:
      user_name: "{{ beaker_admin_login }}"
      password: "{{ beaker_admin_password }}"
      login: 1
    body_format: form-urlencoded
    status_code: 302
  register: login

- name: Add the ipmitool_lanplus powertype
  uri:
    url: http://localhost/bkr/powertypes/
    method: POST
    body:
      name: ipmitool_lanplus
    body_format: json
    headers:
      Accept: application/json
      Content-Type: application/json
      Cookie: "{{ login.set_cookie }}"
    status_code: [201, 409]
  changed_when: powertypes.status == 201
  register: powertypes

- name: Import beaker tasks
  include_tasks: beaker_tasks.yml
